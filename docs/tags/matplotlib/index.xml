<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>matplotlib on 炸鸡人博客</title>
    <link>https://zhajiman.github.io/tags/matplotlib/</link>
    <description>Recent content in matplotlib on 炸鸡人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhajiman.github.io/tags/matplotlib/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>编写科研作图代码有更好的方法</title>
      <link>https://zhajiman.github.io/post/matplotlib_better_code/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_better_code/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是物理海洋学家 Ken Hughes 在 2021 年发表的博客文章，原文标题为 &lt;a href=&#34;https://brushingupscience.com/2021/11/02/a-better-way-to-code-up-scientific-figures/&#34; target=&#34;_blank&#34;&gt;A better way to code up scientific figures&lt;/a&gt;。以 Matplotlib 和 Matlab 为例，强调了模块化思想对于科研作图代码的帮助。我很少看到关于作图方法论的文章，所以翻译出来交流学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我画一张出版级别的科研配图一般需要写 100 - 200 行代码，这个长度有点点危险，因为很容易写出能正常运行但又一团糟的东西。如果代码片段都很短还可以从头重写，但如果代码有上千行，提前做好规划会更明智一些。不过在这两种极端情况之间潜藏着另一种吸引人的做法：写出一段当时感觉无比连贯，但以后会让你吃苦头的脚本。&lt;/p&gt;
&lt;p&gt;假设你想画一张中等复杂度的图片，类似下面这张：&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_better_code/data_overview-1.png&#34; alt=&#34;data_overview-1&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：探索 shapefile</title>
      <link>https://zhajiman.github.io/post/cartopy_shapefile/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_shapefile/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Cartopy 可以通过 &lt;code&gt;feature&lt;/code&gt; 模块向地图添加国界 &lt;code&gt;BORDER&lt;/code&gt; 和省界 &lt;code&gt;STATES&lt;/code&gt;，因其底层采用的 Natural Earth 地图数据并不符合我国的政治主张，所以我们经常需要自备 shapefile 文件来画中国省界，以下面的代码为例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.io.shapereader as shpreader

extents = [70, 140, 0, 60]
crs = ccrs.PlateCarree()
fig = plt.figure()
ax = fig.add_subplot(111, projection=crs)
ax.set_extent(extents, crs)

filepath = &#39;./data/bou2_4/bou2_4p.shp&#39;
reader = shpreader.Reader(filepath)
geoms = reader.geometries()
ax.add_geometries(geoms, crs, lw=0.5, fc=&#39;none&#39;)
reader.close()

plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;图就不放了，这段代码足以应付大部分需要画省界的情况。然而我在无脑粘贴代码的过程中逐渐产生了疑惑：为什么 shapefile 会由三个文件组成？省界是以何种形式存储在文件中？Cartopy 和 Matplotlib 又是怎样将省界画出来的？调查一番源码后总结出了这段代码底层实现的流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 PyShp 包读取 shapefile 文件中的每个形状。&lt;/li&gt;
&lt;li&gt;利用 Shapely 包将形状转换为几何对象。&lt;/li&gt;
&lt;li&gt;利用 Cartopy 包将几何对象投影到地图所在的坐标系上。&lt;/li&gt;
&lt;li&gt;用投影后的坐标构造 Matplotlib 的 Path 对象，最后画在地图上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文的目的即是从头到尾解说一下这段流程，希望加深对 shapefile 格式，Matplotlib 和 Cartopy 包的理解。令人意外的是，随着探索的不断深入，我发现自己自然而然地学会了如何实现省份填色、省份合并，地图白化等，以前看起来十分困难的操作。本文也会一并介绍这些应用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：网格数据与 pcolor</title>
      <link>https://zhajiman.github.io/post/matplotlib_pcolor/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_pcolor/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Matplotlib 的 &lt;code&gt;pcolor&lt;/code&gt; 函数能够绘制由一个个四边形（quadrilateral）单元构成的网格数据的彩色图像，相比绘制等值填色图的 &lt;code&gt;contourf&lt;/code&gt; 函数，不会产生过度的平滑效果，能忠实反映像元的数值大小，因而在科学可视化中也很常用。本文并不打算介绍该函数的种种，只想着重讨论网格数据的显示效果、&lt;code&gt;shading&lt;/code&gt; 参数发挥的作用，以及 &lt;code&gt;pcolor&lt;/code&gt; 和 &lt;code&gt;pcolormesh&lt;/code&gt; 这对双胞胎间的差异。本文基于 Matplotlib 3.3.4。&lt;/p&gt;
&lt;h2 id=&#34;图解网格数据&#34;&gt;图解网格数据&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pcolor&lt;/code&gt; 全名 pseudo color，即伪彩色。函数签名为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pcolor([X, Y], C, **kw)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 &lt;code&gt;X&lt;/code&gt; 和 &lt;code&gt;Y&lt;/code&gt; 分别是网格的横纵坐标，&lt;code&gt;C&lt;/code&gt; 是网格单元内变量的数值。之所以称之为“伪”，是因为 &lt;code&gt;pcolor&lt;/code&gt; 并不像 &lt;code&gt;imshow&lt;/code&gt; 那样直接用 RGB(A) 数组表示颜色，而是将 &lt;code&gt;C&lt;/code&gt; 的数值归一化之后，在一个颜色查找表中查找对应的颜色，进而用颜色差异表现数值大小（原理详见 &lt;a href=&#34;https://zhajiman.github.io/post/matplotlib_colormap/&#34; target=&#34;_blank&#34;&gt;Matplotlib 系列：colormap 的设置&lt;/a&gt;）。&lt;code&gt;C&lt;/code&gt; 数组的形状为 &lt;code&gt;(ny, nx)&lt;/code&gt;，&lt;code&gt;X&lt;/code&gt; 和 &lt;code&gt;Y&lt;/code&gt; 的形状要比 &lt;code&gt;C&lt;/code&gt; 大上一圈，即 &lt;code&gt;(ny + 1, nx + 1)&lt;/code&gt;，&lt;code&gt;ny&lt;/code&gt; 在前表示纵坐标会随数组的行号变动，&lt;code&gt;nx&lt;/code&gt; 在后表示横坐标会随数组的列号变动。&lt;code&gt;pcolor&lt;/code&gt; 对网格数据的显示效果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_pcolor/regular_and_irregular_grids.png&#34; alt=&#34;regular_and_irregular_grids&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：图解 quiver</title>
      <link>https://zhajiman.github.io/post/matplotlib_quiver/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_quiver/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Matplotlib 中用箭头表示风场或电磁场等矢量场时需要用到 &lt;code&gt;quiver&lt;/code&gt; 方法，据字典，quiver 一词的意思是颤动、颤抖或箭袋，貌似也就最后一个意思跟箭头搭得上边。相比于其它画图方法，&lt;code&gt;quiver&lt;/code&gt; 的参数又多又容易混淆，所以本文将以图解的方式逐一介绍。这些参数按功能可分为三种：控制箭头位置和数值的、控制箭头长度和角度的，以及控制箭头尺寸和形状的。下面会按照这个分组顺序来解说。本文代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 中的 Artist——你在浪费时间瞎百度之前应该知道的东西</title>
      <link>https://zhajiman.github.io/post/matplotlib_artist/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_artist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是 &lt;a href=&#34;https://sites.google.com/view/kotarosaito/&#34; target=&#34;_blank&#34;&gt;@skotaro&lt;/a&gt; 在 2018 年发布的一篇关于 Matplotlib Artist 的通俗易懂的介绍，很适合作为官方教程的前置读物，故翻译于此，原文标题是 &lt;a href=&#34;https://dev.to/skotaro/artist-in-matplotlib---something-i-wanted-to-know-before-spending-tremendous-hours-on-googling-how-tos--31oo&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Artist&amp;rdquo; in Matplotlib - something I wanted to know before spending tremendous hours on googling how-tos.&lt;/a&gt;。文中绝大部分链接都重定向到了最新版本的 Matplotlib 文档，还请读者注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_artist/fig_0.jpg&#34; alt=&#34;fig_0&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;毫无疑问 Python 里的 matplotlib 是个非常棒的可视化工具，但在 matplotlib 中慢慢调细节也是件很烦人的事。你很容易浪费好几个小时去找修改图里细节的方法，有时你连那个细节的名字也不知道的话，搜索起来会更加困难。就算你在 Stack Overflow 上找到了相关的提示，也可能再花几个小时根据需求来修改它。不过，只要了解了 matplotlib 图的具体组成，以及你可以对组件执行的操作，就能避开这些徒劳无益的工作。我想，我跟你们中的大多数人一样，做图时遇到的困难都是靠读 Stack Overflow 上那些 matplotlib 高手们的答案来解决的。最近我发现 &lt;a href=&#34;https://matplotlib.org/stable/tutorials/intermediate/artists.html&#34; target=&#34;_blank&#34;&gt;官方的 &lt;code&gt;Artist&lt;/code&gt; 对象教程&lt;/a&gt; 信息很丰富，有助于我们理解 matplotlib 的画图过程并节省调图时间&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。本文里我会分享一些关于 matplotlib 里 &lt;code&gt;Artist&lt;/code&gt; 对象的基本知识，以避免浪费数小时调图的情况出现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：对入门教程的补充</title>
      <link>https://zhajiman.github.io/post/cartopy_appendix/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_appendix/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;几年前曾写过 &lt;a href=&#34;https://zhajiman.github.io/post/cartopy_introduction/&#34; target=&#34;_blank&#34;&gt;Cartopy 系列：从入门到放弃&lt;/a&gt;，但现在来看还是遗漏了不少细节，比如初学者可能会遇到以下问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经度是用 [-180°, 180°] 还是 [0°, 360°] 范围？&lt;/li&gt;
&lt;li&gt;为什么有时候设置的刻度显示不全？&lt;/li&gt;
&lt;li&gt;怎么截取跨越地图边界的区域，画图又怎么跨越边界？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将会用坐标变换的思想来解答以上问题，希望能给读者一些实用的启示。本来应该把这些内容写到入门教程里的，但可能会太长，所以现在单独成篇。文中的讨论主要针对最常用的 Plate Carrée 投影，其它投影需要读者自己测试。代码基于 Cartopy 0.18.0，虽然现在已经更新到 0.20.0 了，但基本思想是一致的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：colorbar 的设置</title>
      <link>https://zhajiman.github.io/post/matplotlib_colorbar/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_colorbar/</guid>
      <description>&lt;h2 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;承接 &lt;a href=&#34;https://zhajiman.github.io/post/matplotlib_colormap/&#34; target=&#34;_blank&#34;&gt;Matplotlib 系列：colormap 的设置&lt;/a&gt; 一文，这次介绍 colorbar。所谓 colorbar 即主图旁一个长条状的小图，能够辅助表示主图中 colormap 的颜色组成和颜色与数值的对应关系。本文将会依次介绍 colorbar 的基本用法、如何设置刻度，以及怎么为组图添加 colorbar。代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：colormap 的设置</title>
      <link>https://zhajiman.github.io/post/matplotlib_colormap/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_colormap/</guid>
      <description>&lt;h2 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;所谓 colormap（颜色表），就是将一系列颜色按给定的顺序排列在一起。其用处是，我们可以通过某种映射关系，将一系列数值映射到一张 colormap 上去，使不同大小的数值对应不同的颜色。这样一来，在绘制填色图时便能直观地用颜色来反映数值的分布。&lt;/p&gt;
&lt;p&gt;在 Matplotlib 中，数值到颜色的映射关系可以用下面这张流程图来表示&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_colormap/flowchart.png&#34; alt=&#34;flowchart&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;图中分为前后两部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先将数组归一化（normalize）到浮点型的 &lt;code&gt;[0, 1]&lt;/code&gt; 范围（或整型的 &lt;code&gt;[0, N - 1]&lt;/code&gt; 范围）上去。&lt;/li&gt;
&lt;li&gt;再把归一化的数组输入给 colormap，查询每个数值对应的颜色。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分的映射关系是固定不变的，但第一部分的映射关系可以通过归一化相关的类加以改变，进而实现对数色标、对称色标、离散色标等一系列填色效果。&lt;/p&gt;
&lt;p&gt;本文将会依次介绍 &lt;code&gt;Colormap&lt;/code&gt; 类、&lt;code&gt;Normalize&lt;/code&gt; 类，以及实际应用的例子。代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：导出高 DPI 的图片</title>
      <link>https://zhajiman.github.io/post/matplotlib_dpi/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_dpi/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;昨天一同学问我怎么把已经画好的图片的 DPI 改到 300，以满足期刊对图片清晰度的要求。上网搜索一番后才发现，虽然我经常在 Matplotlib 中用 &lt;code&gt;dpi&lt;/code&gt; 参数来调节图片清晰度，但实际上我对这个概念半懂不懂。这次借这个契机调研和总结一下相关的知识。本文将会依次介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分辨率和 DPI 是什么。&lt;/li&gt;
&lt;li&gt;DPI 和清晰度的关系。&lt;/li&gt;
&lt;li&gt;如何导出期刊要求的高 DPI 图片。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：为 Lambert 投影地图添加刻度</title>
      <link>https://zhajiman.github.io/post/cartopy_lambert/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_lambert/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Cartopy 中的 Plate Carrée 投影使用方便，但在展示中国地图时会使中国的形状显得很瘪，与之相比，Lambert 投影的效果会更加美观，下图显示了两种投影的差异&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/cartopy_lambert/comparison.png&#34; alt=&#34;comparison&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;所以本文将会介绍如何在 Cartopy 中实现 Lambert 投影，并为地图添上合适的刻度。文中 Cartopy 的版本是 0.18.0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：从入门到放弃</title>
      <link>https://zhajiman.github.io/post/cartopy_introduction/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_introduction/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;常用的地图可视化的编程工具有 MATLAB、IDL、GrADS、GMT、NCL 等。我之前一直使用的是脚本语言 NCL，易用性不错，画地图的效果也很好。然而 2019 年初，NCAR 宣布 NCL 将停止更新，并会在日后转为 Python 的绘图包。于是我开始考虑转投 Python，同时觉得在 Python 环境下如果还是用 PyNGL 那一套语法的话，未免有些换汤不换药。因此我选择用 Python 环境下专有的 Cartopy 包来画地图。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/cartopy_introduction/cartopy_log.png&#34; alt=&#34;cartopy_log&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;此前 Python 最常用的地图包是 Basemap，然而它将于 2020 年被弃用，官方推荐使用 Cartopy 包作为替代。Cartopy 是英国气象局开发的地图绘图包，实现了 Basemap 的大部分功能，还可以通过 Matplotlib 的 API 实现丰富的自定义效果。&lt;/p&gt;
&lt;p&gt;本文将会从一个 NCL 转 Python 的入门者的角度，介绍如何安装 Cartopy，如何绘制地图，并实现一些常用的效果。代码基于 0.18.0 版本的 Cartopy。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
