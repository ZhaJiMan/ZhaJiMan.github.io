<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>时间序列 on 炸鸡人博客</title>
    <link>https://zhajiman.github.io/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/</link>
    <description>Recent content in 时间序列 on 炸鸡人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zhajiman.github.io/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Matplotlib 系列：手动设置时间序列折线图的刻度</title>
      <link>https://zhajiman.github.io/post/matplotlib_time_tick/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_time_tick/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Matplotlib 中画折线图用 &lt;code&gt;ax.plot(x, y)&lt;/code&gt;，当横坐标 &lt;code&gt;x&lt;/code&gt; 是时间数组时，例如 &lt;code&gt;datetime&lt;/code&gt; 或 &lt;code&gt;np.datetime64&lt;/code&gt; 构成的列表，&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 的组合即一条时间序列。Matplotlib 能直接画出时间序列，并自动设置刻度。下面以一条长三年的气温时间序列为例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv(&#39;test.csv&#39;, index_col=0, parse_dates=True)
series = df.loc[&#39;2012&#39;:&#39;2014&#39;, &#39;T&#39;]

fig, ax = plt.subplots(figsize=(10, 4))
ax.plot(series.index, series)
ax.set_ylabel(&#39;Temperature (℃)&#39;)

print(ax.xaxis.get_major_locator())
print(ax.xaxis.get_major_formatter())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.dates.AutoDateLocator object at 0x000001AC6BF89A00&amp;gt;
&amp;lt;matplotlib.dates.AutoDateFormatter object at 0x000001AC6BF89B20&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_time_tick/fig_1.png&#34; alt=&#34;fig_1&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>预测的 KPI：RMSE、MAE、MAPE 和 Bias</title>
      <link>https://zhajiman.github.io/post/forecast_kpis/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/forecast_kpis/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Nicolas Vandeput 发布在 &lt;a href=&#34;https://towardsdatascience.com/forecast-kpi-rmse-mae-mape-bias-cdc5703d242d&#34; target=&#34;_blank&#34;&gt;Towards Data Science 上的文章&lt;/a&gt;，同时也是其著作《&lt;a href=&#34;https://www.amazon.com/Data-Science-Supply-Chain-Forecasting/dp/3110671107&#34; target=&#34;_blank&#34;&gt;Data Science for Supply Chain Forecasting&lt;/a&gt;》中的一章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为预测任务挑选一个合适的指标并没有想象中那么简单，所以这次我们来研究一下 RMSE、MAE、MAPE 和 Bias 的优缺点。&lt;em&gt;剧透：MAPE 是其中最差的，别用。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/forecast_kpis/fig1.png&#34; alt=&#34;fig1&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyTorch 时间序列预测入门</title>
      <link>https://zhajiman.github.io/post/pytorch_time_series_tutorial/</link>
      <pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/pytorch_time_series_tutorial/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/pytorch_time_series_tutorial/xkcd.png&#34; alt=&#34;xkcd&#34; /&gt;
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近学习用 PyTorch 做时间序列预测，发现只有 &lt;a href=&#34;https://www.tensorflow.org/tutorials/structured_data/time_series&#34; target=&#34;_blank&#34;&gt;TensorFlow 官网的教程&lt;/a&gt; 把时间窗口的选取和模型的设置讲得直观易懂，故改编如下。本人也只是入门水平，翻译错误之处还请指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文是利用深度学习做时间序列预测的入门教程，用到的模型包括卷积神经网络（CNN）和循环神经网络（RNN）。全文分为两大部分，又可以细分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预测单个时间步：
&lt;ul&gt;
&lt;li&gt;预测一个特征。&lt;/li&gt;
&lt;li&gt;预测所有特征。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;预测多个时间步：
&lt;ul&gt;
&lt;li&gt;单发预测：模型跑一次输出所有时间步的结果。&lt;/li&gt;
&lt;li&gt;自回归：每次输出一个时间步的预测，再把结果喂给模型得到下一步的预测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文用到的数据和 notebook 可以在 &lt;a href=&#34;https://github.com/ZhaJiMan/pytorch_time_series_tutorial&#34; target=&#34;_blank&#34;&gt;GitHub 仓库&lt;/a&gt; 找到。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
