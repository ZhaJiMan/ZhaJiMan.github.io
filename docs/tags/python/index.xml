<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 炸鸡人博客</title>
    <link>https://zhajiman.github.io/tags/python/</link>
    <description>Recent content in python on 炸鸡人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zhajiman.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python 相关资源汇总（持续更新中）</title>
      <link>https://zhajiman.github.io/post/python_resources/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_resources/</guid>
      <description>&lt;p&gt;简单汇总罗列一下我在网上找到的还不错的 Python 相关资源，包括语言本身以及各种常用库的教程，当然触手可及的官方文档就不收纳了。通通都是免费资源（付费的咱也看不到），分享给有需要的读者。不过互联网资源并非恒久不灭，说不定哪天域名就失效了，或是原作者突然隐藏文章，且看且珍惜吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CALIPSO L2 VFM 产品的读取和绘制（with Python）</title>
      <link>https://zhajiman.github.io/post/calipso_vfm/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/calipso_vfm/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;CALIPSO 卫星的 L2 VFM（Vertical Feature Mask）产品根据激光的后向散射和消光信息，将激光通过的各高度层分类为云或气溶胶。该产品在现实中的表现如下图所示：卫星一边在轨道上移动一边向地面发射激光脉冲，相当于在地面上缓缓拉开一幅“画卷”，VFM 描述了“画卷”上云和气溶胶的分布和分类情况。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/calipso_vfm/R-C.jpg&#34; alt=&#34;R-C&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;处理 VFM 产品的难点在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VFM 数组呈 &lt;code&gt;(N, 5515)&lt;/code&gt; 的形状，N 表示卫星移动时产生了 N 次观测，但 5515 并非表示有 5515 层高度，而是三种水平和垂直分辨率都不同的数据摊平成了长 5515 的数组。因此处理数据时需要参照文档的说明对 5515 进行变形。&lt;/li&gt;
&lt;li&gt;文件中的经纬度和时间与 5515 的对应关系。时间数组需要解析成可用的格式。&lt;/li&gt;
&lt;li&gt;每个 range bin 的分类结果编码到了 16 位的无符号短整型的每个比特上，需要按位解码。&lt;/li&gt;
&lt;li&gt;网上现成的代码偏少。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网上能找到的代码有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hmjbarbosa/CALIOPmatlab&#34; target=&#34;_blank&#34;&gt;CALIOPmatlab&lt;/a&gt;：以前 VFM 的在线文档里是给出过 MATLAB 和 IDL 的代码的，但现在链接消失了。这个仓库提供了民间改进后 MATLAB 代码。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hdfeos.org/zoo/index_openLaRC_Examples.php&#34; target=&#34;_blank&#34;&gt;HDF-EOS COMPREHENSIVE EXAMPLES&lt;/a&gt;：HDF-EOS 网站的示例，简单易理解。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://meteothink.org/examples/meteoinfolab/satellite/calipso.html&#34; target=&#34;_blank&#34;&gt;MeteoInfo examples: CALIPSO data&lt;/a&gt;：基于 MeteoInfo 的代码，还有其它产品的例子。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NASA-DEVELOP/VOCAL&#34; target=&#34;_blank&#34;&gt;Visualization of CALIPSO (VOCAL)&lt;/a&gt;：CALIPSO 官方基于 Python 2 的可视化工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/jnbfknasf113/article/details/122297875&#34; target=&#34;_blank&#34;&gt;星载激光雷达CALIPSO-VFM产品数据读取与显示&lt;/a&gt;：MATLAB 代码的讲解。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;笔者也曾写过两次教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;&#34;&gt;NCL绘制CALIPSO L2 VFM图像&lt;/a&gt;：写得很烂，作图部分可能存在问题。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bbs.06climate.com/forum.php?mod=viewthread&amp;amp;tid=101621&#34; target=&#34;_blank&#34;&gt;Python 绘制 CALIPSO L2 VFM 产品&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文是对旧教程的翻新，会对 VFM 数据的结构进行更多解释，对代码也进行了更新。本文使用 &lt;a href=&#34;https://github.com/fhs/pyhdf&#34; target=&#34;_blank&#34;&gt;pyhdf&lt;/a&gt; 读取 HDF4 文件，用 Matplotlib 3.6.2 画图。为了方便画图，用了一些自制的函数（&lt;a href=&#34;https://github.com/ZhaJiMan/frykit&#34; target=&#34;_blank&#34;&gt;frykit&lt;/a&gt;）。虽然基于 Python，但希望能给使用其它语言的读者提供一点思路。&lt;/p&gt;
&lt;p&gt;完整代码已放入仓库 &lt;a href=&#34;https://github.com/ZhaJiMan/calipso-vfm-visualization&#34; target=&#34;_blank&#34;&gt;calipso-vfm-visualization&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Pandas 系列：管道风格</title>
      <link>https://zhajiman.github.io/post/pandas_pipe/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/pandas_pipe/</guid>
      <description>&lt;h2 id=&#34;r-语言的管道&#34;&gt;R 语言的管道&lt;/h2&gt;
&lt;p&gt;这回来介绍一下如何利用管道（pipe）风格将 Pandas 相关的代码写得更易读，不过首先让我们看看隔壁 R 语言中管道是怎么用的。假设输入是 &lt;code&gt;x&lt;/code&gt;，经过连续四个函数的处理后得到输出 &lt;code&gt;y&lt;/code&gt;，代码可以按顺序写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;x1 &amp;lt;- func1(x, arg1)
x2 &amp;lt;- func2(x1, arg2)
x3 &amp;lt;- func3(x2, arg3)
y &amp;lt;- func4(x3, arg4)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Pandas 系列：图解插值</title>
      <link>https://zhajiman.github.io/post/pandas_interpolate/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/pandas_interpolate/</guid>
      <description>&lt;p&gt;相信大伙对 NumPy 和 SciPy 里的插值比较熟：已知坐标值 &lt;code&gt;xp&lt;/code&gt; 和变量值 &lt;code&gt;fp&lt;/code&gt;，调用函数计算变量在目标坐标 &lt;code&gt;x&lt;/code&gt; 上的数值。例如 &lt;code&gt;np.interp&lt;/code&gt; 的 API 就是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;np.interp(x, xp, fp)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pandas 的 &lt;code&gt;Series&lt;/code&gt; 和 &lt;code&gt;DataFrame&lt;/code&gt; 对象也有插值方法 &lt;code&gt;interpolate&lt;/code&gt;，默认做线性插值。但其功能与 NumPy 和 SciPy 不太一样。以一个序列对象 &lt;code&gt;s&lt;/code&gt; 为例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 缺测部分和有效部分.
invalid = s.isna()
valid = ~invalid

# 对应于xp.
s.index[valid]

# 对应于fp.
s.values[valid]

# 对应于x.
s.index

# 两式大致等价.
s.interpolate(method=&#39;index&#39;).values
np.interp(s.index, s.index[valid], s.values[valid])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即 Pandas 的插值是要利用序列的有效值当 &lt;code&gt;xp&lt;/code&gt; 和 &lt;code&gt;fp&lt;/code&gt;，去填补缺测的部分。所以调用 &lt;code&gt;s.interpolate&lt;/code&gt; 时我们不需要传入形如 &lt;code&gt;x&lt;/code&gt; 的参数，而是应该在调用前就通过 &lt;code&gt;s.reindex&lt;/code&gt; 之类的方法将 &lt;code&gt;x&lt;/code&gt; 融合到 &lt;code&gt;s&lt;/code&gt; 的索引中。这么说可能有点抽象，下面就以图像直观展示 Pandas 里插值的效果。本文不会涉及到具体的插值算法（最邻近、三次样条……），仅以线性插值为例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：衔尾蛇一样的取模</title>
      <link>https://zhajiman.github.io/post/python_modulo/</link>
      <pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_modulo/</guid>
      <description>&lt;p&gt;Python 的取模运算 &lt;code&gt;r = m % n&lt;/code&gt; 相当于&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 或q = math.floor(m / n)
q = m // n
r = m - q * n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即取模的结果是被除数减去地板除的商和除数的乘积，这一规则对正数、负数乃至浮点数皆适用。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;n&lt;/code&gt; 为正数时。显然任意实数 &lt;code&gt;x&lt;/code&gt; 可以表示为 &lt;code&gt;x = r + k * n&lt;/code&gt;，其中 &lt;code&gt;0 &amp;lt;= r &amp;lt; n&lt;/code&gt;，&lt;code&gt;k&lt;/code&gt; 是某个整数。那么有&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x // n = floor(r/n + k) = k
x % n = x - x // n = r
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即 &lt;code&gt;x % n&lt;/code&gt; 的结果总是一个大小在 &lt;code&gt;[0, n)&lt;/code&gt; 之间的实数 &lt;code&gt;r&lt;/code&gt;。当 &lt;code&gt;n = 10&lt;/code&gt; 时，以 &lt;code&gt;x = 12&lt;/code&gt; 和 &lt;code&gt;x = -12&lt;/code&gt; 为例：&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/python_modulo/number.png&#34; alt=&#34;number&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;如果以 &lt;code&gt;n&lt;/code&gt; 为一个周期，那么 &lt;code&gt;x = 12&lt;/code&gt; 就相当于往右一个周期再走 2 格，&lt;code&gt;x % n&lt;/code&gt; 会消去这个周期，剩下不满一个周期的 2；&lt;code&gt;x = -12&lt;/code&gt; 相当于往左两个周期后再往右走 8 格，&lt;code&gt;x % n&lt;/code&gt; 会消去这两个周期，剩下不满一个周期且为正数的 8。&lt;/p&gt;
&lt;p&gt;再本质点说，取模运算就是在 &lt;code&gt;[0, 10)&lt;/code&gt; 的窗口内进行“衔尾蛇”移动：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;12&lt;/code&gt; 向右超出窗口两格， &lt;code&gt;12 % 10 = 2&lt;/code&gt;，即右边出两格那就左边进两格。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-12&lt;/code&gt; 向左超出窗口 12 格，&lt;code&gt;-12 % n = 8&lt;/code&gt;，即左边出 12 格那就右边进 12 格，发现还是超出左边两格，再从右边进两格，最后距离零点 8 格。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：测量程序的运行时间</title>
      <link>https://zhajiman.github.io/post/python_measure_time/</link>
      <pubDate>Wed, 03 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_measure_time/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;说到测量程序的运行时间这件事，我最早的做法是在桌上摆个手机，打开秒表应用，右手在命令行里敲回车的同时左手启动秒表，看屏幕上程序跑完后再马上按停秒表，最后在纸上记下时间。后来我在 Linux 上学会了在命令开头添加一个 &lt;code&gt;time&lt;/code&gt;，终于摆脱了手动计时的原始操作。这次就想总结一下迄今为止我用过的那些测量时间的工具/代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：变量命名时形容词应该放在名词前面还是后面？</title>
      <link>https://zhajiman.github.io/post/python_position_of_adjective/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_position_of_adjective/</guid>
      <description>&lt;p&gt;今天改程序时脑海里突然蹦出这个问题，更宽泛地说，是修饰词或者偏正结构的先后顺序，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upper_ax&lt;/code&gt; 和 &lt;code&gt;bottom_ax&lt;/code&gt;，&lt;code&gt;ax_upper&lt;/code&gt; 和 &lt;code&gt;ax_bottom&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_date&lt;/code&gt; 和 &lt;code&gt;end_date&lt;/code&gt;，&lt;code&gt;date_start&lt;/code&gt; 和 &lt;code&gt;date_end&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦开始疑惑，焦虑便随之而来：哪一种比较好呢？我之前的代码里好像两种写法都出现过，有没有什么现成的规范可以参考呢？越想越不痛快，所以赶紧上网找点前人经验来背书。意外的是，网上大部分文章都在讨论如何取有意义的变量名，而关于这个问题的寥寥无几，也许是因为太细节、太“语法”了？现归纳两篇我看过的帖子以供参考。&lt;/p&gt;
&lt;p&gt;首先在 stack overflow 上找到了&lt;a href=&#34;https://stackoverflow.com/questions/36504357/should-variable-names-have-adjectives-before-or-after-the-noun&#34; target=&#34;_blank&#34;&gt;一模一样的提问&lt;/a&gt;：是用 &lt;code&gt;left_button&lt;/code&gt; 和 &lt;code&gt;right_button&lt;/code&gt;，还是 &lt;code&gt;button_left&lt;/code&gt; 和 &lt;code&gt;button_right&lt;/code&gt; 更好呢？提问者自己觉得前者符合英文语序，读起来更加自然，而后者强调了变量的重点在于按钮，而左和右是额外的补充信息。有评论指出后者在 IDE 里更方便，因为你一键入 &lt;code&gt;button&lt;/code&gt;，就会自动联想出所有带后缀的版本。这也挺符合人的联想过程，我们肯定是先想到“我要找按钮”，再明确具体要什么样的按钮。当然也有评论给出了经典的废话：与其纠结哪一种约定，任选一种并在项目里维持一致性最重要！好家伙，要是我如此豁达还会来搜这种鸡毛蒜皮的问题吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：将列表等分为 n 份</title>
      <link>https://zhajiman.github.io/post/python_split_list/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_split_list/</guid>
      <description>&lt;p&gt;本文研究一个小问题：如何将长度为 &lt;code&gt;N&lt;/code&gt; 的列表等分为 &lt;code&gt;n&lt;/code&gt; 份？该问题的示意图如下&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/python_split_list/diagram1.png&#34; alt=&#34;diagram1&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; 除以 &lt;code&gt;n&lt;/code&gt; 的商为 &lt;code&gt;size&lt;/code&gt;，余数为 &lt;code&gt;rest&lt;/code&gt;，数值满足 &lt;code&gt;0 &amp;lt;= rest &amp;lt; n or size&lt;/code&gt;（除法规则请见 &lt;a href=&#34;https://zhajiman.github.io/post/python_divide/&#34; target=&#34;_blank&#34;&gt;Python 系列：除法运算符&lt;/a&gt;）。当 &lt;code&gt;N&lt;/code&gt; 是 &lt;code&gt;n&lt;/code&gt; 的倍数时，&lt;code&gt;rest = 0&lt;/code&gt; ，列表正好被等分为 &lt;code&gt;n&lt;/code&gt; 份，每份含 &lt;code&gt;size&lt;/code&gt; 个元素；而当 &lt;code&gt;N&lt;/code&gt; 不是 &lt;code&gt;n&lt;/code&gt; 的倍数时，&lt;code&gt;rest &amp;gt; 0&lt;/code&gt;，按前面的分法会剩下 &lt;code&gt;rest&lt;/code&gt; 个元素。对于后一种情况来说并不存在真正的等分，只能说希望尽量等分，问题的重点也落在了如何处理这 &lt;code&gt;rest&lt;/code&gt; 个元素上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MODIS 二级气溶胶产品指北（with Python）</title>
      <link>https://zhajiman.github.io/post/guide_to_modis_aerosol_product/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/guide_to_modis_aerosol_product/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;笔者初次使用 MODIS 二级气溶胶产品时，一下就被密密麻麻一堆变量搞懵了：很多变量名字里带个 &lt;code&gt;Optical_Depth&lt;/code&gt;，这我能猜到，就是气溶胶光学厚度，但各种 &lt;code&gt;Corrected&lt;/code&gt;、&lt;code&gt;Effective&lt;/code&gt;、&lt;code&gt;Best&lt;/code&gt;、&lt;code&gt;Average&lt;/code&gt;、&lt;code&gt;Small&lt;/code&gt;、&lt;code&gt;Large&lt;/code&gt; 的前后缀鬼知道是什么。看过的论文基本不说具体用的哪个变量，各种教程也不会告诉你这些亲戚间的差异，似乎这件事一点也不重要。本着 know your data 的心态，我在翻阅了 MODIS 的几个官网后总算从反演的原理中稍微体会到了这些前后缀的意义。现将学习经验总结归纳如下，希望能帮到和我一样疑惑的小伙伴。同时本文还会提供简单的 Python 示例代码。&lt;/p&gt;
&lt;p&gt;如果嫌正文太啰嗦，可以直接跳到文末的总结部分，那里直接给出了各个变量的使用建议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：小心默认的可变参数</title>
      <link>https://zhajiman.github.io/post/python_mutable_arguments/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_mutable_arguments/</guid>
      <description>&lt;p&gt;之前我在 &lt;a href=&#34;https://zhajiman.github.io/post/cartopy_introduction/&#34; target=&#34;_blank&#34;&gt;Cartopy 系列：从入门到放弃&lt;/a&gt; 一文中定义了这样一个函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def set_map_extent_and_ticks(
    ax, extent, xticks, yticks, nx=0, ny=0,
    xformatter=LongitudeFormatter(),
    yformatter=LatitudeFormatter()
):
    ...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：命名空间和作用域</title>
      <link>https://zhajiman.github.io/post/python_namespace_scope/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_namespace_scope/</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;命名空间&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;命名空间（namespace）&lt;/strong&gt;：官方说法是从名称到对象的映射，实际上就是保存变量名与变量值绑定关系的一个空间。赋值语句会将绑定关系写入命名空间，而引用变量时则会根据变量名在命名空间中查询出对应的值。并且大部分的命名空间都是利用 Python 的字典来实现的（例外如类的 &lt;code&gt;__slots__&lt;/code&gt; 属性）。程序中出现在全局的变量构成一个命名空间，Python 内置的函数和异常类也有它们自己的命名空间，每次定义函数或类时也会创建专属于它们的命名空间。命名空间之间相互独立，同名的变量可以存在于不同的命名空间中，例如两个函数内部可以使用同名的局部变量，这有助于我们在不引发冲突的同时合理复用变量名。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;作用域&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用域（scope）&lt;/strong&gt;：官方说法是 Python 程序中能直接访问一个命名空间的文本区域。听起来有点抽象，实际上就是指出程序中哪些区域的文本归哪个命名空间管理，例如函数的作用域显然就是函数体（定义函数的所有语句），全局作用域就是从头到尾整个程序。但并不是说出现在一个作用域中的变量就一定属于该作用域（的命名空间）：若在该区域内通过赋值语句等操作创建（或修改）了该变量的绑定关系后，那它就属于该作用域；否则它就属于其它作用域，在当前区域引用它需要根据特定的规则向其它作用域进行查询。例如常见的在函数中引用全局变量。本文的一个重点就是要来仔细说说这一规则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：除法运算符</title>
      <link>https://zhajiman.github.io/post/python_divide/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_divide/</guid>
      <description>&lt;p&gt;在 Python 3 中关于除法的运算符有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：表示精确的真除法。魔法方法为 &lt;code&gt;__truediv__&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;：表示地板除。魔法方法为 &lt;code&gt;__floordiv__&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;：表示求模。魔法方法为 &lt;code&gt;__mod__&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：操作文件和目录的路径</title>
      <link>https://zhajiman.github.io/post/python_path/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_path/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前在 Linux 上用 Python 处理系统的文件和目录时，我都是简单粗暴地用 &lt;code&gt;os.system&lt;/code&gt; 函数直接执行 shell 命令来实现的。例如新建一个目录并把文件移动进去，我会这么写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dirpath = &#39;./result&#39;
filepath = &#39;./data.txt&#39;
os.system(f&#39;mkdir {dirpath}&#39;)
os.system(f&#39;mv {filepath} {dirpath}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即把 shell 命令硬编码到程序中。但最近在 Windows 上运行老程序时，因为 &lt;code&gt;os.system&lt;/code&gt; 默认调用 CMD，所以这种写法的老代码全部木大。&lt;/p&gt;
&lt;p&gt;其实借助 Python 标准库中用于系统交互和路径处理的模块，就能尽可能降低代码对平台的依赖，并且模块中也提供有许多方便的函数。本文会记录那些最常用的功能。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
