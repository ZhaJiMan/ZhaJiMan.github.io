<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 炸鸡人博客</title>
    <link>https://zhajiman.github.io/post/</link>
    <description>Recent content in Posts on 炸鸡人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 05 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://zhajiman.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>变量命名时形容词应该放在名词前面还是后面？</title>
      <link>https://zhajiman.github.io/post/python_position_of_adjective/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_position_of_adjective/</guid>
      <description>&lt;p&gt;今天改程序时脑海里突然蹦出这个问题，更宽泛地说，是修饰词或者偏正结构的先后顺序，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;upper_ax&lt;/code&gt; 和 &lt;code&gt;bottom_ax&lt;/code&gt;，&lt;code&gt;ax_upper&lt;/code&gt; 和 &lt;code&gt;ax_bottom&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_date&lt;/code&gt; 和 &lt;code&gt;end_date&lt;/code&gt;，&lt;code&gt;date_start&lt;/code&gt; 和 &lt;code&gt;date_end&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦开始疑惑，焦虑便随之而来：哪一种比较好呢？我之前的代码里好像两种写法都出现过，有没有什么现成的规范可以参考呢？越想越不痛快，所以赶紧上网找点前人经验来背书。意外的是，网上大部分文章都在讨论如何取有意义的变量名，而关于这个问题的寥寥无几，也许是因为太细节、太“语法”了？现归纳两篇我看过的帖子以供参考。&lt;/p&gt;
&lt;p&gt;首先在 stack overflow 上找到了&lt;a href=&#34;https://stackoverflow.com/questions/36504357/should-variable-names-have-adjectives-before-or-after-the-noun&#34; target=&#34;_blank&#34;&gt;一模一样的提问&lt;/a&gt;：是用 &lt;code&gt;left_button&lt;/code&gt; 和 &lt;code&gt;right_button&lt;/code&gt;，还是 &lt;code&gt;button_left&lt;/code&gt; 和 &lt;code&gt;button_right&lt;/code&gt; 更好呢？提问者自己觉得前者符合英文语序，读起来更加自然，而后者强调了变量的重点在于按钮，而左和右是额外的补充信息。有评论指出后者在 IDE 里更方便，因为你一键入 &lt;code&gt;button&lt;/code&gt;，就会自动联想出所有带后缀的版本。这也挺符合人的联想过程，我们肯定是先想到“我要找按钮”，再明确具体要什么样的按钮。当然也有评论给出了经典的废话：与其纠结哪一种约定，任选一种并在项目里维持一致性最重要！好家伙，要是我如此豁达还会来搜这种鸡毛蒜皮的问题吗？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：将列表等分为 n 份</title>
      <link>https://zhajiman.github.io/post/python_split_list/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_split_list/</guid>
      <description>&lt;p&gt;本文研究一个小问题：如何将长度为 &lt;code&gt;N&lt;/code&gt; 的列表等分为 &lt;code&gt;n&lt;/code&gt; 份？该问题的示意图如下&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/python_split_list/diagram1.png&#34; alt=&#34;diagram1&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;N&lt;/code&gt; 除以 &lt;code&gt;n&lt;/code&gt; 的商为 &lt;code&gt;size&lt;/code&gt;，余数为 &lt;code&gt;rest&lt;/code&gt;，数值满足 &lt;code&gt;0 &amp;lt;= rest &amp;lt; n or size&lt;/code&gt;（除法规则请见 &lt;a href=&#34;https://zhajiman.github.io/post/python_divide/&#34; target=&#34;_blank&#34;&gt;Python 系列：除法运算符&lt;/a&gt;）。当 &lt;code&gt;N&lt;/code&gt; 是 &lt;code&gt;n&lt;/code&gt; 的倍数时，&lt;code&gt;rest = 0&lt;/code&gt; ，列表正好被等分为 &lt;code&gt;n&lt;/code&gt; 份，每份含 &lt;code&gt;size&lt;/code&gt; 个元素；而当 &lt;code&gt;N&lt;/code&gt; 不是 &lt;code&gt;n&lt;/code&gt; 的倍数时，&lt;code&gt;rest &amp;gt; 0&lt;/code&gt;，按前面的分法会剩下 &lt;code&gt;rest&lt;/code&gt; 个元素。对于后一种情况来说并不存在真正的等分，只能说希望尽量等分，问题的重点也落在了如何处理这 &lt;code&gt;rest&lt;/code&gt; 个元素上。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>写博客是一种自虐行为</title>
      <link>https://zhajiman.github.io/post/blog_masochism/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/blog_masochism/</guid>
      <description>&lt;p&gt;19 年中旬受 &lt;a href=&#34;https://crmnt.xyz&#34; target=&#34;_blank&#34;&gt;薄核兄&lt;/a&gt; 的启发创建了此博客，从开始到现在都以总结学习过程中遇到的编程问题为主，事实证明这些博文还挺有用。但随着篇数的增多，我的写作体验从最开始的事务性记录变成消遣，到现在又发展为一种自虐行为。所以本博客的第一篇牢骚——也就是本文——就来说说这是怎样一个自虐法。如果有读者不幸点了进来，我先为您的眼睛道个歉。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：图解 quiver</title>
      <link>https://zhajiman.github.io/post/matplotlib_quiver/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_quiver/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Matplotlib 中用箭头表示风场或电磁场等矢量场时需要用到 &lt;code&gt;quiver&lt;/code&gt; 方法，据字典，quiver 一词的意思是颤动、颤抖或箭袋，貌似也就最后一个意思跟箭头搭得上边。相比于其它画图方法，&lt;code&gt;quiver&lt;/code&gt; 的参数又多又容易混淆，所以本文将以图解的方式逐一介绍。这些参数按功能可分为三种：控制箭头位置和数值的、控制箭头长度和角度的，以及控制箭头尺寸和形状的。下面会按照这个分组顺序来解说。本文代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MODIS 二级气溶胶产品指北（with Python）</title>
      <link>https://zhajiman.github.io/post/guide_to_modis_aerosol_product/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/guide_to_modis_aerosol_product/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;笔者初次使用 MODIS 二级气溶胶产品时，一下就被密密麻麻一堆变量搞懵了：很多变量名字里带个 &lt;code&gt;Optical_Depth&lt;/code&gt;，这我能猜到，就是气溶胶光学厚度，但各种 &lt;code&gt;Corrected&lt;/code&gt;、&lt;code&gt;Effective&lt;/code&gt;、&lt;code&gt;Best&lt;/code&gt;、&lt;code&gt;Average&lt;/code&gt;、&lt;code&gt;Small&lt;/code&gt;、&lt;code&gt;Large&lt;/code&gt; 的前后缀鬼知道是什么。看过的论文基本不说具体用的哪个变量，各种教程也不会告诉你这些亲戚间的差异，似乎这件事一点也不重要。本着 know your data 的心态，我在翻阅了 MODIS 的几个官网后总算从反演的原理中稍微体会到了这些前后缀的意义。现将学习经验总结归纳如下，希望能帮到和我一样疑惑的小伙伴。同时本文还会提供简单的 Python 示例代码。&lt;/p&gt;
&lt;p&gt;如果嫌正文太啰嗦，可以直接跳到文末的总结部分，那里直接给出了各个变量的使用建议。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 相关资源汇总（持续更新中）</title>
      <link>https://zhajiman.github.io/post/python_resources/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_resources/</guid>
      <description>&lt;p&gt;简单汇总罗列一下我在网上找到的还不错的 Python 相关资源，包括语言本身以及各种常用库的教程，当然触手可及的官方文档就不收纳了。通通都是免费资源（付费的咱也看不到），分享给有需要的读者。不过互联网资源并非恒久不灭，说不定哪天域名就失效了，或是原作者突然隐藏文章，且看且珍惜吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 中的 Artist——你在浪费时间瞎百度之前应该知道的东西</title>
      <link>https://zhajiman.github.io/post/matplotlib_artist/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_artist/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;这是 &lt;a href=&#34;https://sites.google.com/view/kotarosaito/&#34; target=&#34;_blank&#34;&gt;@skotaro&lt;/a&gt; 在 2018 年发布的一篇关于 Matplotlib Artist 的通俗易懂的介绍，很适合作为官方教程的前置读物，故翻译于此，原文标题是 &lt;a href=&#34;https://dev.to/skotaro/artist-in-matplotlib---something-i-wanted-to-know-before-spending-tremendous-hours-on-googling-how-tos--31oo&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Artist&amp;rdquo; in Matplotlib - something I wanted to know before spending tremendous hours on googling how-tos.&lt;/a&gt;。文中绝大部分链接都重定向到了最新版本的 Matplotlib 文档，还请读者注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_artist/fig_0.jpg&#34; alt=&#34;fig_0&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;毫无疑问 Python 里的 matplotlib 是个非常棒的可视化工具，但在 matplotlib 中慢慢调细节也是件很烦人的事。你很容易浪费好几个小时去找修改图里细节的方法，有时你连那个细节的名字也不知道的话，搜索起来会更加困难。就算你在 Stack Overflow 上找到了相关的提示，也可能再花几个小时根据需求来修改它。不过，只要了解了 matplotlib 图的具体组成，以及你可以对组件执行的操作，就能避开这些徒劳无益的工作。我想，我跟你们中的大多数人一样，做图时遇到的困难都是靠读 Stack Overflow 上那些 matplotlib 高手们的答案来解决的。最近我发现 &lt;a href=&#34;https://matplotlib.org/stable/tutorials/intermediate/artists.html&#34; target=&#34;_blank&#34;&gt;官方的 &lt;code&gt;Artist&lt;/code&gt; 对象教程&lt;/a&gt; 信息很丰富，有助于我们理解 matplotlib 的画图过程并节省调图时间&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。本文里我会分享一些关于 matplotlib 里 &lt;code&gt;Artist&lt;/code&gt; 对象的基本知识，以避免浪费数小时调图的情况出现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：小心默认的可变参数</title>
      <link>https://zhajiman.github.io/post/python_mutable_arguments/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_mutable_arguments/</guid>
      <description>&lt;p&gt;之前我在 &lt;a href=&#34;https://zhajiman.github.io/post/cartopy_introduction/&#34; target=&#34;_blank&#34;&gt;Cartopy 系列：从入门到放弃&lt;/a&gt; 一文中定义了这样一个函数&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def set_map_extent_and_ticks(
    ax, extent, xticks, yticks, nx=0, ny=0,
    xformatter=LongitudeFormatter(),
    yformatter=LatitudeFormatter()
):
    ...
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：对入门教程的补充</title>
      <link>https://zhajiman.github.io/post/cartopy_appendix/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_appendix/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;几年前曾写过 &lt;a href=&#34;https://zhajiman.github.io/post/cartopy_introduction/&#34; target=&#34;_blank&#34;&gt;Cartopy 系列：从入门到放弃&lt;/a&gt;，但现在来看还是遗漏了不少细节，比如初学者可能会遇到以下问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经度是用 [-180°, 180°] 还是 [0°, 360°] 范围？&lt;/li&gt;
&lt;li&gt;为什么有时候设置的刻度显示不全？&lt;/li&gt;
&lt;li&gt;怎么截取跨越地图边界的区域，画图又怎么跨越边界？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将会用坐标变换的思想来解答以上问题，希望能给读者一些实用的启示。本来应该把这些内容写到入门教程里的，但可能会太长，所以现在单独成篇。文中的讨论主要针对最常用的 Plate Carrée 投影，其它投影需要读者自己测试。代码基于 Cartopy 0.18.0，虽然现在已经更新到 0.20.0 了，但基本思想是一致的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：命名空间和作用域</title>
      <link>https://zhajiman.github.io/post/python_namespace_scope/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_namespace_scope/</guid>
      <description>&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;命名空间&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;命名空间（namespace）&lt;/strong&gt;：官方说法是从名称到对象的映射，实际上就是保存变量名与变量值绑定关系的一个空间。赋值语句会将绑定关系写入命名空间，而引用变量时则会根据变量名在命名空间中查询出对应的值。并且大部分的命名空间都是利用 Python 的字典来实现的（例外如类的 &lt;code&gt;__slots__&lt;/code&gt; 属性）。程序中出现在全局的变量构成一个命名空间，Python 内置的函数和异常类也有它们自己的命名空间，每次定义函数或类时也会创建专属于它们的命名空间。命名空间之间相互独立，同名的变量可以存在于不同的命名空间中，例如两个函数内部可以使用同名的局部变量，这有助于我们在不引发冲突的同时合理复用变量名。&lt;/p&gt;
&lt;h3 id=&#34;作用域&#34;&gt;作用域&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;作用域（scope）&lt;/strong&gt;：官方说法是 Python 程序中能直接访问一个命名空间的文本区域。听起来有点抽象，实际上就是指出程序中哪些区域的文本归哪个命名空间管理，例如函数的作用域显然就是函数体（定义函数的所有语句），全局作用域就是从头到尾整个程序。但并不是说出现在一个作用域中的变量就一定属于该作用域（的命名空间）：若在该区域内通过赋值语句等操作创建（或修改）了该变量的绑定关系后，那它就属于该作用域；否则它就属于其它作用域，在当前区域引用它需要根据特定的规则向其它作用域进行查询。例如常见的在函数中引用全局变量。本文的一个重点就是要来仔细说说这一规则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：除法运算符</title>
      <link>https://zhajiman.github.io/post/python_divide/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_divide/</guid>
      <description>&lt;p&gt;在 Python 3 中关于除法的运算符有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：表示精确的真除法。魔法方法为 &lt;code&gt;__truediv__&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt;：表示地板除。魔法方法为 &lt;code&gt;__floordiv__&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;：表示求模。魔法方法为 &lt;code&gt;__mod__&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Vim 的语法</title>
      <link>https://zhajiman.github.io/post/vim_grammar/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/vim_grammar/</guid>
      <description>&lt;p&gt;Vim 是一个拥有魔力的文本编辑器——这并不是比喻，而是说你在 Vim 中真的可以念咒语来操纵文本。看看我们的键盘，在 normal 模式下几乎每个键都有特定的功能，尤其是其中的数字和 26 个字母。如果把每个键都看作 Vim 这门语言中的单词，那么只要依据特定的语法，通过连续击键来遣词造句，就能施展操作文本的魔法。并且 Vim 语言的语法简单到用一句话就能描述：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;verb + noun
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面就来简单讲讲魔法的基本法。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/vim_grammar/vim_keys.png&#34; alt=&#34;vim_keys&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Numpy 系列：random 模块的变化</title>
      <link>https://zhajiman.github.io/post/numpy_random/</link>
      <pubDate>Tue, 21 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/numpy_random/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;这几天要用 NumPy 生成随机数，所以去查了一下 &lt;code&gt;np.random&lt;/code&gt; 模块的官方文档，却惊讶地发现里面介绍的用法跟我的记忆有很大出入：例如以前用 &lt;code&gt;np.random.rand&lt;/code&gt; 便能生成 [0, 1) 之间均匀分布的随机数，现在文档里记载的却是面向对象风格的写法（创建随机数生成器再调用方法……）。调查一番后发现原来这一改动发生于 NumPy 1.17 版本（2020 年 1 月），并且网上对此的中文介绍也比较少，所以现撰文简单介绍一下该模块在改动前后的两套用法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单的 Vim 配置</title>
      <link>https://zhajiman.github.io/post/vim_config/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/vim_config/</guid>
      <description>&lt;p&gt;最近越发老年痴呆，连自己写的 Vim 配置的作用都忘光了，所以在本文记录并解说一下我常用的配置以便查阅。这里的配置非常简单，仅用以强化基本的使用体验。由于我同时工作在能联网的 PC 和内网的服务器上，所以也会分开介绍如何在这两种环境下安装插件。文中 Vim 版本分别是 8.1（PC）和 7.4（服务器）。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/vim_config/vim.png&#34; alt=&#34;vim&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二值图像的连通域标记</title>
      <link>https://zhajiman.github.io/post/connected_component_labelling/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/connected_component_labelling/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;连通域标记（connected component labelling）即找出二值图像中互相独立的各个连通域并加以标记，如下图所示（引自 &lt;a href=&#34;https://gist.github.com/MarcWang/5f346375246e1cdb88dbe745b840cfaa&#34; target=&#34;_blank&#34;&gt;MarcWang 的 Gist&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/connected_component_labelling/diagram.jpg&#34; alt=&#34;diagram&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;可以看到图中有三个独立的区域，我们希望找到并用数字标记它们，以便计算各个区域的轮廓、外接形状、质心等参数。连通域标记最基本的两个算法是 Seed-Filling 算法和 Two-Pass 算法，下面便来分别介绍它们，并用 Python 加以实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：colorbar 的设置</title>
      <link>https://zhajiman.github.io/post/matplotlib_colorbar/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_colorbar/</guid>
      <description>&lt;h2 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;承接 &lt;a href=&#34;https://zhajiman.github.io/post/matplotlib_colormap/&#34; target=&#34;_blank&#34;&gt;Matplotlib 系列：colormap 的设置&lt;/a&gt; 一文，这次介绍 colorbar。所谓 colorbar 即主图旁一个长条状的小图，能够辅助表示主图中 colormap 的颜色组成和颜色与数值的对应关系。本文将会依次介绍 colorbar 的基本用法、如何设置刻度，以及怎么为组图添加 colorbar。代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：colormap 的设置</title>
      <link>https://zhajiman.github.io/post/matplotlib_colormap/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_colormap/</guid>
      <description>&lt;h2 id=&#34;0-前言&#34;&gt;0. 前言&lt;/h2&gt;
&lt;p&gt;所谓 colormap（颜色表），就是将一系列颜色按给定的顺序排列在一起。其用处是，我们可以通过某种映射关系，将一系列数值映射到一张 colormap 上去，使不同大小的数值对应不同的颜色。这样一来，在绘制填色图时便能直观地用颜色来反映数值的分布。&lt;/p&gt;
&lt;p&gt;在 Matplotlib 中，数值到颜色的映射关系可以用下面这张图来表示&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/matplotlib_colormap/value_color_mapping.png&#34; alt=&#34;value_color_mapping.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;图中分为前后两部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先将数组的数值归一化（Normalization）到浮点型的 [0.0, 1.0] 范围或整型的 [0, N - 1] 范围上去。&lt;/li&gt;
&lt;li&gt;再把归一化的数据输入给 colormap，输出数组数值对应的颜色（RGBA 值）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二部分的映射关系基本上是固定不变的，但第一部分的映射关系可以通过 Matplotlib 的许多类来加以改变，进而实现对数色标、对称色标、离散色标等一系列可视化效果。&lt;/p&gt;
&lt;p&gt;本文将会依次介绍 &lt;code&gt;Colormap&lt;/code&gt; 类、归一化会用到的类，以及实际应用的例子。代码基于 Matplotlib 3.3.4。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用 Hugo 重新搭建博客</title>
      <link>https://zhajiman.github.io/post/rebuild_blog/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/rebuild_blog/</guid>
      <description>&lt;p&gt;本博客之前是用软件 &lt;a href=&#34;https://github.com/getgridea/gridea&#34; target=&#34;_blank&#34;&gt;Gridea&lt;/a&gt; 制作的，这是个静态博客写作客户端，可以作为 Markdown 编辑器，同时简单设置下就能一键生成静态页面并上传到网上，非常适合我这种电脑小白使用。不过前段时间发现怎么都没法上传本地写好的内容，于是决定重新用现在流行的 Hugo 来搭建博客。本文使用的是 0.84.4 版本的 Hugo 和 2.32.0 版本的 Git。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>地球上两点之间的距离（改）</title>
      <link>https://zhajiman.github.io/post/distance_on_earth/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/distance_on_earth/</guid>
      <description>&lt;p&gt;最近又碰到了给出地球上两点的经纬度，然后计算它们之间距离的问题。之前曾经通过查维基写过简单的博文，不过现在实践时发现博文里问题较多，故重撰如下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Matplotlib 系列：导出高 DPI 的图片</title>
      <link>https://zhajiman.github.io/post/matplotlib_dpi/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/matplotlib_dpi/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;昨天一同学问我怎么把已经画好的图片的 DPI 改到 300，以满足期刊对图片清晰度的要求。上网搜索一番后才发现，虽然我经常在 Matplotlib 中用 &lt;code&gt;dpi&lt;/code&gt; 参数来调节图片清晰度，但实际上我对这个概念半懂不懂。这次借这个契机调研和总结一下相关的知识。本文将会依次介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分辨率和 DPI 是什么。&lt;/li&gt;
&lt;li&gt;DPI 和清晰度的关系。&lt;/li&gt;
&lt;li&gt;如何导出期刊要求的高 DPI 图片。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python 系列：操作文件和目录的路径</title>
      <link>https://zhajiman.github.io/post/python_path/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/python_path/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;之前在 Linux 上用 Python 处理系统的文件和目录时，我都是简单粗暴地用 &lt;code&gt;os.system&lt;/code&gt; 函数直接执行 shell 命令来实现的。例如新建一个目录并把文件移动进去，我会这么写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dirpath = &#39;./result&#39;
filepath = &#39;./data.txt&#39;
os.system(f&#39;mkdir {dirpath}&#39;)
os.system(f&#39;mv {filepath} {dirpath}&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即把 shell 命令硬编码到程序中。但最近在 Windows 上运行老程序时，因为 &lt;code&gt;os.system&lt;/code&gt; 默认调用 CMD，所以这种写法的老代码全部木大。&lt;/p&gt;
&lt;p&gt;其实借助 Python 标准库中用于系统交互和路径处理的模块，就能尽可能降低代码对平台的依赖，并且模块中也提供有许多方便的函数。本文会记录那些最常用的功能。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：为 Lambert 投影地图添加刻度</title>
      <link>https://zhajiman.github.io/post/cartopy_lambert/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_lambert/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Cartopy 中的 Plate Carrée 投影使用方便，但在展示中国地图时会使中国的形状显得很瘪，与之相比，Lambert 投影的效果会更加美观，下图显示了两种投影的差异&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/cartopy_lambert/comparison.png&#34; alt=&#34;comparison&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;所以本文将会介绍如何在 Cartopy 中实现 Lambert 投影，并为地图添上合适的刻度。文中 Cartopy 的版本是 0.18.0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Cartopy 系列：从入门到放弃</title>
      <link>https://zhajiman.github.io/post/cartopy_introduction/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/cartopy_introduction/</guid>
      <description>&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;常用的地图可视化的编程工具有 MATLAB、IDL、GrADS、GMT、NCL 等。我之前一直使用的是脚本语言 NCL，易用性不错，画地图的效果也很好。然而 2019 年初，NCAR 宣布 NCL 将停止更新，并会在日后转为 Python 的绘图包。于是我开始考虑转投 Python，同时觉得在 Python 环境下如果还是用 PyNGL 那一套语法的话，未免有些换汤不换药。因此我选择用 Python 环境下专有的 Cartopy 包来画地图。&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/cartopy_introduction/cartopy_log.png&#34; alt=&#34;cartopy_log&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;此前 Python 最常用的地图包是 Basemap，然而它将于 2020 年被弃用，官方推荐使用 Cartopy 包作为替代。Cartopy 是英国气象局开发的地图绘图包，实现了 Basemap 的大部分功能，还可以通过 Matplotlib 的 API 实现丰富的自定义效果。&lt;/p&gt;
&lt;p&gt;本文将会从一个 NCL 转 Python 的入门者的角度，介绍如何安装 Cartopy，如何绘制地图，并实现一些常用的效果。代码基于 0.18.0 版本的 Cartopy。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NumPy 系列：缺测值处理</title>
      <link>https://zhajiman.github.io/post/numpy_missing_value/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/numpy_missing_value/</guid>
      <description>&lt;p&gt;现实中观测的数据或多或少会有缺失的部分，通常称为缺测值（missing value）。NumPy 因为设计上的问题，不能像 R 和 NCL 那样原生支持缺测类型，而是有两种处理缺测的实现：NaN 和 masked array。下面便来依次介绍它们。代码基于 NumPy 1.20.1。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>立体角简介</title>
      <link>https://zhajiman.github.io/post/solid_angle/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/solid_angle/</guid>
      <description>&lt;p&gt;这里简单介绍一下立体角的概念。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>炸 鸡 人</title>
      <link>https://zhajiman.github.io/post/fried_chicken_man/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://zhajiman.github.io/post/fried_chicken_man/</guid>
      <description>&lt;p&gt;&lt;img class=&#34;img-zoomable&#34; src=&#34;https://zhajiman.github.io/fried_chicken_man/devil_man.png&#34; alt=&#34;devil_man&#34; /&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
